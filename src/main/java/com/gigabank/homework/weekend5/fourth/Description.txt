## Логика работы приложения

1. Реализовать логику работы с таблицами в разных сценариях:
    - Создать класс`DBConnectionManager` в котором должно быть реализовано подключение к базе данных.
    - Создать класс `CreateTables` который будет создавать таблицы если их нет в бд. Создать метод `initializeDatabase()`.

    ```java
        statement.executeUpdate("CREATE TABLE IF NOT EXISTS User (" +
                    "id VARCHAR(50) PRIMARY KEY, " +
                    "name VARCHAR(100), " +
                    "email VARCHAR(100), " +
                    "phone VARCHAR(20))");
        ...
    ```

2. В таблице `User` должны быть записаны два пользователя. У этих пользователей должны быть сохранены
в таблице `BankAccount` по два счета.

3. Добавить методы для реализации бизнес логики, создать их в классе `DBManager`:
    - Сохранение нового пользователя.  `addUser()`
    - Получение всех пользователей. `getUsers()`
    - Сохранение нового счета пользователя. `addBankAccount()`
    - Удаление пользователя и его счетов. `deleteUser()`
    - Обновление баланса пользователя. `updateBalance()`
    - Сохрание транзакций. `addTransactions()`
    - Получение всех транзакций `getTransactions()`
    - Получение конкретной транзакции по фильтру `getTransaction()`
    - Самостоятельно разработать дополнительные методы, перенеся функции фильтрации и поиска в sql запросы.

4. При проведении транзакции, информация об этом должна записываться в таблицу `Transaction`.

5. В методе Main должны последовательно вызываться методы изменяющие баланс.
    Последовательность методов обращения к бд составить на свое усмотрение
    (Например: пополнить баланс пользователя, сделать перевод другому пользователю, удалить счет пользователя).
    Вся информация о проведении транзакций и изменении данных счетов и пользователей,
    должна быть отображена в логах и бд. В конце вывести информацию из бд о всех транзакциях
    по конкретного пользователя.

    Сделать новые сервисы `AnalyticServiceBDImpl`, `BankAccountServiceBDImpl`по аналогии с текущими классами,
    но в котором все взаимодействие с данными должно происходить через обращение к бд.

6. * Создать класс`PhantomRead` в нем осуществить запуск двух одновременно выполняющихся транзакций.
Предусмотреть функционал запуска одновременно двух транзакций, одна транзакция должна изменять баланс пользователя,
вторая читать баланс пользователя.
        - Первая транзакция (чтение) будет считывать баланс пользователя. `transactionRead()`
        - Вторая транзакция (запись) будет изменять баланс этого же пользователя. `transactionWrite()`

        Для реализации многопоточной работы в Java вы можете использовать Thread,
        позволяя каждой операции выполняться в своем потоке.